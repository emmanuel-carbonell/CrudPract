//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Datos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MedicalConsultationsAppEntities : DbContext
    {
        public MedicalConsultationsAppEntities()
            : base("name=MedicalConsultationsAppEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__EFMigrationsHistory> C__EFMigrationsHistory { get; set; }
        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<Profesores> Profesores { get; set; }
        public virtual DbSet<ESTUDIANTE> ESTUDIANTE { get; set; }
        public virtual DbSet<EmpleadosAdm> EmpleadosAdm { get; set; }
        public virtual DbSet<Aulas> Aulas { get; set; }
        public virtual DbSet<Areas> Areas { get; set; }
        public virtual DbSet<Departamentos> Departamentos { get; set; }
        public virtual DbSet<Provincias> Provincias { get; set; }
    
        public virtual int SP_DELETE_ESTUDIANTE(Nullable<int> estudianteId)
        {
            var estudianteIdParameter = estudianteId.HasValue ?
                new ObjectParameter("EstudianteId", estudianteId) :
                new ObjectParameter("EstudianteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DELETE_ESTUDIANTE", estudianteIdParameter);
        }
    
        public virtual int SP_DELETE_Profesores(Nullable<int> profesoresId)
        {
            var profesoresIdParameter = profesoresId.HasValue ?
                new ObjectParameter("ProfesoresId", profesoresId) :
                new ObjectParameter("ProfesoresId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DELETE_Profesores", profesoresIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_INSERTA_ESTUDIANTE(string nombre, Nullable<int> edad, Nullable<int> matricula, Nullable<int> fechaNacimiento, Nullable<int> provincia)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var edadParameter = edad.HasValue ?
                new ObjectParameter("Edad", edad) :
                new ObjectParameter("Edad", typeof(int));
    
            var matriculaParameter = matricula.HasValue ?
                new ObjectParameter("Matricula", matricula) :
                new ObjectParameter("Matricula", typeof(int));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(int));
    
            var provinciaParameter = provincia.HasValue ?
                new ObjectParameter("Provincia", provincia) :
                new ObjectParameter("Provincia", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_INSERTA_ESTUDIANTE", nombreParameter, edadParameter, matriculaParameter, fechaNacimientoParameter, provinciaParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_INSERTA_Profesores(Nullable<int> codigo, string nombre, string apellido, Nullable<int> fechaNacimiento, Nullable<int> area)
        {
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(int));
    
            var areaParameter = area.HasValue ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_INSERTA_Profesores", codigoParameter, nombreParameter, apellidoParameter, fechaNacimientoParameter, areaParameter);
        }
    
        public virtual ObjectResult<SP_SELECT_ESTUDIANTE_Result> SP_SELECT_ESTUDIANTE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SELECT_ESTUDIANTE_Result>("SP_SELECT_ESTUDIANTE");
        }
    
        public virtual ObjectResult<SP_SELECT_Profesores_Result> SP_SELECT_Profesores()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SELECT_Profesores_Result>("SP_SELECT_Profesores");
        }
    
        public virtual int SPU_UPDATE_ESTUDIANTE(Nullable<int> estudianteId, string nombre, Nullable<int> edad, Nullable<int> fechaNacimiento, Nullable<int> matricula, Nullable<int> provincia)
        {
            var estudianteIdParameter = estudianteId.HasValue ?
                new ObjectParameter("EstudianteId", estudianteId) :
                new ObjectParameter("EstudianteId", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var edadParameter = edad.HasValue ?
                new ObjectParameter("Edad", edad) :
                new ObjectParameter("Edad", typeof(int));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(int));
    
            var matriculaParameter = matricula.HasValue ?
                new ObjectParameter("Matricula", matricula) :
                new ObjectParameter("Matricula", typeof(int));
    
            var provinciaParameter = provincia.HasValue ?
                new ObjectParameter("Provincia", provincia) :
                new ObjectParameter("Provincia", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPU_UPDATE_ESTUDIANTE", estudianteIdParameter, nombreParameter, edadParameter, fechaNacimientoParameter, matriculaParameter, provinciaParameter);
        }
    
        public virtual int SPU_UPDATE_Profesores(Nullable<int> profesoresId, Nullable<int> codigo, string nombre, string apellido, Nullable<int> fechaNacimiento, Nullable<int> area)
        {
            var profesoresIdParameter = profesoresId.HasValue ?
                new ObjectParameter("ProfesoresId", profesoresId) :
                new ObjectParameter("ProfesoresId", typeof(int));
    
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(int));
    
            var areaParameter = area.HasValue ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPU_UPDATE_Profesores", profesoresIdParameter, codigoParameter, nombreParameter, apellidoParameter, fechaNacimientoParameter, areaParameter);
        }
    
        public virtual int SP_DELETE_EmpleadosAdm(Nullable<int> empleadosAdmId)
        {
            var empleadosAdmIdParameter = empleadosAdmId.HasValue ?
                new ObjectParameter("EmpleadosAdmId", empleadosAdmId) :
                new ObjectParameter("EmpleadosAdmId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DELETE_EmpleadosAdm", empleadosAdmIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_INSERTA_EmpleadosAdm(Nullable<int> codigo, string nombre, string apellido, string fechaNacimiento, string departamento)
        {
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento != null ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(string));
    
            var departamentoParameter = departamento != null ?
                new ObjectParameter("Departamento", departamento) :
                new ObjectParameter("Departamento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_INSERTA_EmpleadosAdm", codigoParameter, nombreParameter, apellidoParameter, fechaNacimientoParameter, departamentoParameter);
        }
    
        public virtual ObjectResult<SP_SELECT_EmpleadosAdm_Result> SP_SELECT_EmpleadosAdm()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SELECT_EmpleadosAdm_Result>("SP_SELECT_EmpleadosAdm");
        }
    
        public virtual int SPU_UPDATE_EmpleadosaAdm(Nullable<int> empleadosAdmId, Nullable<int> codigo, string nombre, string apellido, string fechaNacimiento, string departamento)
        {
            var empleadosAdmIdParameter = empleadosAdmId.HasValue ?
                new ObjectParameter("EmpleadosAdmId", empleadosAdmId) :
                new ObjectParameter("EmpleadosAdmId", typeof(int));
    
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento != null ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(string));
    
            var departamentoParameter = departamento != null ?
                new ObjectParameter("Departamento", departamento) :
                new ObjectParameter("Departamento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPU_UPDATE_EmpleadosaAdm", empleadosAdmIdParameter, codigoParameter, nombreParameter, apellidoParameter, fechaNacimientoParameter, departamentoParameter);
        }
    
        public virtual int SPU_UPDATE_EmpleadosAdm(Nullable<int> empleadosAdmId, Nullable<int> codigo, string nombre, string apellido, string fechaNacimiento, string departamento)
        {
            var empleadosAdmIdParameter = empleadosAdmId.HasValue ?
                new ObjectParameter("EmpleadosAdmId", empleadosAdmId) :
                new ObjectParameter("EmpleadosAdmId", typeof(int));
    
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento != null ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(string));
    
            var departamentoParameter = departamento != null ?
                new ObjectParameter("Departamento", departamento) :
                new ObjectParameter("Departamento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPU_UPDATE_EmpleadosAdm", empleadosAdmIdParameter, codigoParameter, nombreParameter, apellidoParameter, fechaNacimientoParameter, departamentoParameter);
        }
    
        public virtual int SP_DELETE_Aulas(Nullable<int> aulasId)
        {
            var aulasIdParameter = aulasId.HasValue ?
                new ObjectParameter("AulasId", aulasId) :
                new ObjectParameter("AulasId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DELETE_Aulas", aulasIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_INSERTA_Aulas(string nombre, string capacidad)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var capacidadParameter = capacidad != null ?
                new ObjectParameter("Capacidad", capacidad) :
                new ObjectParameter("Capacidad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_INSERTA_Aulas", nombreParameter, capacidadParameter);
        }
    
        public virtual ObjectResult<SP_SELECT_Aulas_Result> SP_SELECT_Aulas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SELECT_Aulas_Result>("SP_SELECT_Aulas");
        }
    
        public virtual int SPU_UPDATE_Aulas(Nullable<int> aulasId, string nombre, string capacidad)
        {
            var aulasIdParameter = aulasId.HasValue ?
                new ObjectParameter("AulasId", aulasId) :
                new ObjectParameter("AulasId", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var capacidadParameter = capacidad != null ?
                new ObjectParameter("Capacidad", capacidad) :
                new ObjectParameter("Capacidad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPU_UPDATE_Aulas", aulasIdParameter, nombreParameter, capacidadParameter);
        }
    }
}
